Camera edge of desk -- waving hand up and down for 1k frames:

No code changes.
	{
	  frameCount: 1000,
	  flashes: 0,
	  ignored: 0,
	  previousFrameMagTotal: 0,
	  motionFlashes: 0,
	  ignoredFrames: 16,
	  cost: { filterVectors: 10548, clustering: 16110, reducing: 76 },
	  averageCost: { filterVectors: 10.548, clustering: 16.11, reducing: 0.076 }
	}

euclidean distance:
	{
	  frameCount: 1000,
	  flashes: 0,
	  ignored: 0,
	  previousFrameMagTotal: 0,
	  motionFlashes: 0,
	  ignoredFrames: 16,
	  cost: { filterVectors: 9909, clustering: 13821, reducing: 135 },
	  averageCost: { filterVectors: 9.909, clustering: 13.821, reducing: 0.135 }
	}

built-in euclidean distance:
{
  frameCount: 1000,
  flashes: 0,
  ignored: 0,
  previousFrameMagTotal: 0,
  motionFlashes: 0,
  ignoredFrames: 16,
  cost: { filterVectors: 9278, clustering: 14632, reducing: 102 },
  averageCost: { filterVectors: 9.278, clustering: 14.632, reducing: 0.102 }
}

starting cleaning up unnecessary stuff in dbscan
{
  frameCount: 1000,
  flashes: 0,
  ignored: 0,
  previousFrameMagTotal: 0,
  motionFlashes: 0,
  ignoredFrames: 20,
  cost: { filterVectors: 10147, clustering: 14143, reducing: 99 },
  averageCost: { filterVectors: 10.147, clustering: 14.143, reducing: 0.099 }
}

cleaning up:
{
  frameCount: 1000,
  flashes: 0,
  ignored: 0,
  previousFrameMagTotal: 0,
  motionFlashes: 0,
  ignoredFrames: 23,
  cost: { filterVectors: 9563, clustering: 13500, reducing: 104 },
  averageCost: { filterVectors: 9.563, clustering: 13.5, reducing: 0.104 }
}

moved three variables out of look in expand_cluster()
{
  frameCount: 1000,
  flashes: 0,
  ignored: 0,
  previousFrameMagTotal: 0,
  motionFlashes: 0,
  ignoredFrames: 16,
  cost: { filterVectors: 10917, clustering: 15044, reducing: 116 },
  averageCost: { filterVectors: 10.917, clustering: 15.044, reducing: 0.116 }
}

moved out decl. of three vars in loop in main of dbscan
{
  frameCount: 1000,
  flashes: 0,
  ignored: 0,
  previousFrameMagTotal: 0,
  motionFlashes: 0,
  ignoredFrames: 16,
  cost: { filterVectors: 9714, clustering: 14034, reducing: 113 },
  averageCost: { filterVectors: 9.714, clustering: 14.034, reducing: 0.113 }
}

just removed useless stuff in dbscan:
{
  frameCount: 1000,
  flashes: 0,
  ignored: 0,
  previousFrameMagTotal: 0,
  motionFlashes: 0,
  ignoredFrames: 16,
  cost: { filterVectors: 10106, clustering: 14172, reducing: 107 },
  averageCost: { filterVectors: 10.106, clustering: 14.172, reducing: 0.107 }
}

changed dbscan epsilon 2 to 1
{
  frameCount: 1000,
  flashes: 0,
  ignored: 0,
  previousFrameMagTotal: 0,
  motionFlashes: 0,
  ignoredFrames: 16,
  cost: { filterVectors: 10310, clustering: 13127, reducing: 100 },
  averageCost: { filterVectors: 10.31, clustering: 13.127, reducing: 0.1 }
}

changed dbscan min-points from 4 to 2 (2 is not good, as I cannot make a poly out of it)
{
  frameCount: 1000,
  flashes: 0,
  ignored: 0,
  previousFrameMagTotal: 0,
  motionFlashes: 0,
  ignoredFrames: 16,
  cost: { filterVectors: 10246, clustering: 12753, reducing: 102 },
  averageCost: { filterVectors: 10.246, clustering: 12.753, reducing: 0.102 }
}

dbscan min-points from 2 to 3
{
  frameCount: 1000,
  flashes: 0,
  ignored: 0,
  previousFrameMagTotal: 0,
  motionFlashes: 0,
  ignoredFrames: 16,
  cost: { filterVectors: 9989, clustering: 13140, reducing: 99 },
  averageCost: { filterVectors: 9.989, clustering: 13.14, reducing: 0.099 }
}

optimized point-in-polygon lookup for ignored area (it _should_ not affect anything much at all as I don't have much ignored area)
{
  frameCount: 1000,
  flashes: 0,
  ignored: 0,
  previousFrameMagTotal: 0,
  motionFlashes: 0,
  ignoredFrames: 16,
  cost: { filterVectors: 7847, clustering: 13786, reducing: 113 },
  averageCost: { filterVectors: 7.847, clustering: 13.786, reducing: 0.113 }
}

without loner check in filterFrame (does this reduce quality? I feel it might -- alternatively make clustering more expensive)
{
  frameCount: 1000,
  flashes: 0,
  ignored: 0,
  previousFrameMagTotal: 0,
  motionFlashes: 0,
  ignoredFrames: 16,
  cost: { filterVectors: 6779, clustering: 13750, reducing: 103 },
  averageCost: { filterVectors: 6.779, clustering: 13.75, reducing: 0.103 }
}

removed 'frame size' reduction if we are not sending raw vectors to client
{
  frameCount: 1000,
  flashes: 0,
  ignored: 0,
  previousFrameMagTotal: 0,
  motionFlashes: 0,
  ignoredFrames: 16,
  cost: { filterVectors: 5269, clustering: 14288, reducing: 113 },
  averageCost: { filterVectors: 5.269, clustering: 14.288, reducing: 0.113 }
}
loner check back in (looks like clustering is not too affected?) (will make loner check configurable)
{
  frameCount: 1000,
  flashes: 0,
  ignored: 0,
  previousFrameMagTotal: 0,
  motionFlashes: 0,
  ignoredFrames: 16,
  cost: { filterVectors: 6104, clustering: 14597, reducing: 110 },
  averageCost: { filterVectors: 6.104, clustering: 14.597, reducing: 0.11 }
}
clustering back to manhattan distance (_should_ be faster)
{
  frameCount: 1000,
  flashes: 0,
  ignored: 0,
  previousFrameMagTotal: 0,
  motionFlashes: 0,
  ignoredFrames: 16,
  cost: { filterVectors: 5555, clustering: 12991, reducing: 107 },
  averageCost: { filterVectors: 5.555, clustering: 12.991, reducing: 0.107 }
}
two silly for() changes in get_region_neighbours() to test...
{
  frameCount: 1000,
  flashes: 0,
  ignored: 0,
  previousFrameMagTotal: 0,
  motionFlashes: 0,
  ignoredFrames: 16,
  cost: { filterVectors: 5517, clustering: 13820, reducing: 102 },
  averageCost: { filterVectors: 5.517, clustering: 13.82, reducing: 0.102 }
}

break....
{
  frameCount: 1000,
  flashes: 0,
  ignored: 0,
  previousFrameMagTotal: 0,
  motionFlashes: 0,
  ignoredFrames: 16,
  cost: { filterVectors: 6149, clustering: 13066, reducing: 120 },
  averageCost: { filterVectors: 6.149, clustering: 13.066, reducing: 0.12 }
}
pre-allocated status array of dbscan
{
  frameCount: 1000,
  flashes: 0,
  ignored: 0,
  previousFrameMagTotal: 0,
  motionFlashes: 0,
  ignoredFrames: 16,
  cost: { filterVectors: 6361, clustering: 12674, reducing: 137 },
  averageCost: { filterVectors: 6.361, clustering: 12.674, reducing: 0.137 }
}

// we have 33.33ms (and a little change -- 6 frames)_for everything_ (24 fps)

jdbscan uint16array instead of plain array
{
  frameCount: 1000,
  flashes: 0,
  ignored: 0,
  previousFrameMagTotal: 0,
  motionFlashes: 0,
  ignoredFrames: 16,
  cost: { filterVectors: 6200, clustering: 12767, reducing: 93 },
  averageCost: { filterVectors: 6.2, clustering: 12.767, reducing: 0.093 }
}

check if distance is not too far away before doing BOTH abs() and sub() -- Wow! and this was after a sixpack of beer. Never stop drinking.
{
  frameCount: 1000,
  flashes: 0,
  ignored: 0,
  previousFrameMagTotal: 0,
  motionFlashes: 0,
  ignoredFrames: 16,
  cost: {
    filterVectors: 6611,
    clustering: 6156,
    reducing: 115,
    maxClusteringCost: 55
  },
  averageCost: { filterVectors: 6.611, clustering: 6.156, reducing: 0.115 }
}

